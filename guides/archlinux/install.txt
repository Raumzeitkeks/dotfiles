# This describes the installation procedure of my Arch Linux system
# By Calvin Timmer (Raumzeitkeks) <calvin.timmer@mailbox.org>

#################
## BASE SYSTEM ##
#################

* Boot from live usb

* Set keyboard layout for this session
  `loadkeys de-latin1`

* Verify UEFI boot mode by checking the presence of the efivars
  `ls /sys/firmware/efi/efivars`

* Check or establish network connectivity
  (If necessary: `wifi-menu`)
  `ping 8.8.8.8`
  `ping google.com`

* Update system clock
  `timedatectl set-ntp true`

* Choose the disk
  `lsblk`

* Partition the disk
  `parted /dev/sdx`
  > `mklabel gpt`
  > `mkpart ESP fat32 1MiB 513MiB`
  > `set 1 boot on`
  > `mkpart primary ext4 513MiB 100%`
  > `print`
  > `quit`

* Format the partitions
  `mkfs.fat -F32 /dev/sdx1`
  `mkfs.ext4 /dev/sdx2`

* Mount the partitions
  `mount /dev/sdx2 /mnt`
  `mkdir /mnt/boot`
  `mount /dev/sdx1 /mnt/boot`

* Select mirrors (will be updated from dotfiles later)
  `curl -o /etc/pacman.d/mirrorlist.all https://www.archlinux.org/mirrorlist/all/`
  `vim /etc/pacman.d/mirrorlist.all` and uncomment some mirrors
  `rankmirrors /etc/pacman.d/mirrorlist.all > /etc/pacman.d/mirrorlist`
  `vim /etc/pacman.d/mirrorlist` and reorder mirrors if you would like to (e.g. prefer https)
  `rm /etc/pacman.d/mirrorlist.all`

* Install the base system
  `pacstrap /mnt base base-devel`

* Autogenerate fstab file from current mounts
  `genfstab -U /mnt > /mnt/etc/fstab`

* Chroot into new environment
  `arch-chroot /mnt`

* Set console keyboard layout
  `echo "KEYMAP=de-latin1" > /etc/vconsole.conf`

* Set timezone and adjust hardware clock
  `ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime`
  `hwclock --systohc`

* Generate locales
  `sed -i -e 's/^#de_DE/de_DE/ -e 's/^#en_US/en_US/' /etc/locale.gen`
  `locale-gen`
  `echo "LANG=en_US.UFT-8" > /etc/locale.conf`

* Set hostname
  `echo "HOSTNAME" > /etc/hostname`

* Optional: If wireless network will be used, install required packages
  `pacman -S wpa_supplicant` and necessary firmware/driver packages

* Install the boot loader
  `bootctl --path=/boot install`
  `echo -e "default arch\ntimeout 5\neditor  0" > /boot/loader/loader.conf`
  `cp /usr/share/systemd/bootctl/arch.conf /boot/loader/entries/arch.conf`
  `sed -i -e "s/PARTUUID=X*/PARTUUID=$(blkid -s PARTUUID -o value /dev/sdx2)/" -e 's/rootfstype=X*/rootfstype=ext4/' /boot/loader/entries/arch.conf`

* Install Intel microcode
  `pacman -S intel-ucode`
  `sed -i -e "/initrd \/initramfs-linux.img/ i initrd \/intel-ucode.img" /boot/loader/entries/arch.conf`

* Set root password
  `passwd`

* Exit chroot and reboot into new system
  `exit`
  `umount -R /mnt`
  `reboot`


############
## SYSTEM ##
############

* Log in as root

* Configure network
  -> See network.txt

* Configure pacman
  `sed -i -e 's/^#Color/Color/' /etc/pacman.conf`
  `sed -i -e 's/^#TotalDownload/TotalDownload/' /etc/pacman.conf`

* Update archlinux-keyring
  `pacman -Sy archlinux-keyring`

* Update packages
  `pacman -Syu`

* Install zsh
  `pacman -S zsh zsh-completions zsh-syntax-highlighting`

* Install sway
  `pacman -S sway rxvt-unicode dmenu`
  `mkdir -p /etc/environment.d`
  `echo "XKB_DEFAULT_LAYOUT=de" > /etc/environment.d/xkb-layout-de.conf`

* Enable wayland support in several toolkits
  `pacman -S qt5-wayland`
  `mkdir -p /etc/environment.d`
  `echo "\
    GDK_BACKEND=wayland
    CLUTTER_BACKEND=wayland
    QT_QPA_PLATFORM=wayland
    QT_WAYLAND_DISABLE_WINDOWDECORATION=\"1\"
    SDL_VIDEODRIVER=wayland
    ECORE_EVAS_ENGINE=wayland
    ELM_ENGINE=wayland
    ELM_DISPLAY=wl
    ELM_ACCEL=opengl
    " > /etc/environment.d/wayland-support.conf`

* Install audio utilities
  `pacman -S alsa-utils`

* Install git
  `pacman -S git`
  `pacman -S --asdeps tk`

* Install fonts
  `pacman -S ttf-dejavu ttf-inconsolata adobe-source-{code,sans,serif}-pro-fonts`

* Create custom pacman repositories and configure makepkg
  -> See packaging.txt


#################
## CREATE USER ##
#################

* Create new user
  `useradd -m -G wheel -s /bin/zsh USERNAME`
  `passwd USERNAME`

* Enable sudo usage
  `visudo` and uncomment the line '%wheel ALL=(ALL) ALL'

* Configure zsh for user
  `echo -e "plugins=(zsh-completions)\nautoload -U compinit && compinit\nsource /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" > /home/USERNAME/.zshrc`

* Configure sway for user
  `mkdir -p /home/USERNAME/.config/sway`
  `cp /etc/sway/config /home/USERNAME/.config/sway/`

* Fix ownership in home directories
  `chown -R USERNAME:USERNAME /home/USERNAME/`

* Switch user
  `exit` and log into new user

* Verify that sudo works and lock root user
  `sudo passwd -l root`


################
## USER SETUP ##
################

* Configure git
  `git config --global user.name "NAME"`
  `git config --global user.email "MAIL"`

* Deploy dotfiles

